# Questionnaire survey with oTree

## Outline of the experimental program to be created:

- Questionnaire (single player)
    - Question item
       - Gender (radio button)
       - Age (optional)
       - Prefecture of residence (optional)
       - Device used for answering (select)


## Create an app
Create a base application

```python
otree startapp questionnaire
```

### Defining the Constants class: basic design

- Open models.py in questionnaire folder

- Set the number of people, the number of repetitions, the initial holding amount, and the coefficient in the Constants class.

```python
class Constants(BaseConstants):
    name_in_url = 'questionnaire'
    players_per_group = None 
    num_rounds = 1 
```
Notes: 

- For `players_per_group`, enter "None" for 1 player. 

- For `num_rounds`, enter "1" to ask only once.

- `names_in_url`, `players_per_group`, `num_rounds` are defined on oTree, so it is not desirable to use them as arbitrary variable names.

### Subsession class definition

- Since there is no interaction between players this time, it is not defined.

```python
class Subsession(BaseSubsession):
    pass
```

### Group class definition

- Since there is no interaction between players this time, it is not defined.

```python
class Group(BaseGroup):
    pass
```

### Player class definition

- Define variables for each player in the Player class

```python
class Player(BasePlayer):
    q_gender = models.CharField(initial=None,
                                choices=['male', 'female', 'no answer'],
                                verbose_name='What is your gender? ',
                                widget=widgets.RadioSelect())
    
    q_age = models.PositiveIntegerField(verbose_name='What is your age?',
                                        choices=range(0, 125),
                                        initial=None)
    
    q_prefecture = models.CharField(initial=None,
                                choices=['Hokkaido', 'Aomori', 'Iwate', 'Miyagi', 'Akita', 'Yamagata', 'Fukushima', 'Ibaraki', 'Tochigi', 'Gunma', 'Saitama', 'Chiba', 'Tokyo', 'Kanagawa', 'Niigata', 'Toyama', 'Ishikawa', 'Fukui', 'Yamanashi', 'Nagano', 'Gifu', 'Shizuoka', 'Aichi', 'Mie', 'Shiga', 'Kyoto', 'Osaka', 'Hyogo', 'Nara', 'Wakayama', 'Tottori', 'Shimane', 'Okayama', 'Hiroshima', 'Yamaguchi', 'Tokushima', 'Kagawa', 'Ehime', 'Kochi', 'Fukuoka', 'Saga', 'Nagasaki', 'Kumamoto', 'Oita', 'Miyazaki', 'Kagoshima', 'Okinawa'],
                                verbose_name='What area do you live in? ',
                                widget=forms.Select())

    q_device = models.CharField(initial=None,
                                choices=['computer',
                                        'Tablet',
                                        'smartphone',
                                        'other than that'
                                        ],
                                verbose_name='By which electronic device are you answering? ',
                                widget=forms.Select())
```


## Defining templates:

- In templates, we will decide on the page to display specific items.

- Create an html file called `Page1.html` in `questionnaire/templates/questionnaire`
  
   - You just need to rewrite the existing `MyPage.html`
   
### pages

```html
{% extends "global/Page.html" %}
{% load otree static %}

{% block title %}
    Questions:
{%endblock%}

{% block content %}

<div>
    <p>
        Please select the most appropriate (closest) option for the following questions. <br>
    </p>
</div>

<div style="background-color:#e6e6e6;">
    {% formfield player.q_device %}
    {% formfield player.q_gender %}
    {% formfield player.q_age %}
    {% formfield player.q_prefecture %}
</div>


    {% next_button %}

{%endblock%}
```

### easy explanation

```html
{% block title %}
    Questions:
{%endblock%}
```

* Set the "Title" in the web page.


```html
{% block content %}
    ...
{%endblock%}
```

* Write the actual question items in this.


```html
  {% formfield player.q_device %}
  {% formfield player.q_gender %}
  {% formfield player.q_age %}
  {% formfield player.q_prefecture %}
```

* Write `{% formfield [defined in models] %}` for an item that requires some kind of input.
  * In this case, the input defined in the player class is required, so it is written as `player.`.


```html
  {% next_button %}
```
* This is the "Next" button.
  * Click this button to go to the next screen.


## definition of pages:

- In `pages.py`, set the ``page display order'', ``input items'', ** ``function calculation order''**, etc.

  - Actually, the ``order of function calculation'' is important.
  
- However, there is no function calculation this time, so don't worry about it.
  
- Behavior set in `pages.py`

  - Define the contents of `Page1.html`.
  
    - Display the items to be entered.

### About Page1
- On `Page1`, there is an input of the answer to the question item.

  - Let's make an input screen.


```python
class Page1(Page):
    form_model = 'player'
    form_fields = [
    'q_gender',
    'q_age',
    'q_prefecture',
    'q_device'
    ]
```

### Define the display order

* Defines the order in which the screen is displayed at the end.

```python
page_sequence = [Page1]
```


## Defining session configs in setting:

* To implement experiments with oTree, you need to register your app in `SESSION_CONFIGS` in `settings.py`.

```python
SESSION_CONFIGS = [
    dict(
        name='questionnaire',
        display_name="Initial Questionnaire",
        num_demo_participants=1, # Here we need to define how many people will participate in the demo.
        app_sequence=['questionnaire']
    ),
]
```

## start as server

- Start your own terminal as a server

```python
otree devserver
```
  - Now you can run the experiment on your own terminal.
  - Access [http://localhost:8000/](http://localhost:8000/).
