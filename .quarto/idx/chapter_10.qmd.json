{"title":"Questionnaire survey with oTree","markdown":{"headingText":"Questionnaire survey with oTree","containsRefs":false,"markdown":"\n## Outline of the experimental program to be created:\n\n-   Questionnaire (single player)\n    -   Question item\n        -   Gender (radio button)\n        -   Age (optional)\n        -   Prefecture of residence (optional)\n        -   Device used for answering (select)\n\n## Create an app\n\nCreate a base application\n\n``` python\notree startapp questionnaire\n```\n\n### Defining the Constants class: basic design\n\n-   Open models.py in questionnaire folder\n\n-   Set the number of people, the number of repetitions, the initial holding amount, and the coefficient in the Constants class.\n\n``` python\nclass Constants(BaseConstants):\n    name_in_url = 'questionnaire'\n    players_per_group = None \n    num_rounds = 1 \n```\n\nNotes:\n\n-   For `players_per_group`, enter \"None\" for 1 player.\n\n-   For `num_rounds`, enter \"1\" to ask only once.\n\n-   `names_in_url`, `players_per_group`, `num_rounds` are defined on oTree, so it is not desirable to use them as arbitrary variable names.\n\n### Subsession class definition\n\n-   Since there is no interaction between players this time, it is not defined.\n\n``` python\nclass Subsession(BaseSubsession):\n    pass\n```\n\n### Group class definition\n\n-   Since there is no interaction between players this time, it is not defined.\n\n``` python\nclass Group(BaseGroup):\n    pass\n```\n\n### Player class definition\n\n-   Define variables for each player in the Player class\n\n``` python\nclass Player(BasePlayer):\n    q_gender = models.CharField(initial=None,\n                                choices=['male', 'female', 'no answer'],\n                                verbose_name='What is your gender? ',\n                                widget=widgets.RadioSelect())\n    \n    q_age = models.PositiveIntegerField(verbose_name='What is your age?',\n                                        choices=range(0, 125),\n                                        initial=None)\n    \n    q_prefecture = models.CharField(initial=None,\n                                choices=['Hokkaido', 'Aomori', 'Iwate', 'Miyagi', 'Akita', 'Yamagata', 'Fukushima', 'Ibaraki', 'Tochigi', 'Gunma', 'Saitama', 'Chiba', 'Tokyo', 'Kanagawa', 'Niigata', 'Toyama', 'Ishikawa', 'Fukui', 'Yamanashi', 'Nagano', 'Gifu', 'Shizuoka', 'Aichi', 'Mie', 'Shiga', 'Kyoto', 'Osaka', 'Hyogo', 'Nara', 'Wakayama', 'Tottori', 'Shimane', 'Okayama', 'Hiroshima', 'Yamaguchi', 'Tokushima', 'Kagawa', 'Ehime', 'Kochi', 'Fukuoka', 'Saga', 'Nagasaki', 'Kumamoto', 'Oita', 'Miyazaki', 'Kagoshima', 'Okinawa'],\n                                verbose_name='What area do you live in? ',\n                                widget=forms.Select())\n\n    q_device = models.CharField(initial=None,\n                                choices=['computer',\n                                        'Tablet',\n                                        'smartphone',\n                                        'other than that'\n                                        ],\n                                verbose_name='By which electronic device are you answering? ',\n                                widget=forms.Select())\n```\n\n## Defining templates:\n\n-   In templates, we will decide on the page to display specific items.\n\n-   Create an html file called `Page1.html` in `questionnaire/templates/questionnaire`\n\n    -   You just need to rewrite the existing `MyPage.html`\n\n### pages\n\n``` html\n{% extends \"global/Page.html\" %}\n{% load otree static %}\n\n{% block title %}\n    Questions:\n{%endblock%}\n\n{% block content %}\n\n<div>\n    <p>\n        Please select the most appropriate (closest) option for the following questions. <br>\n    </p>\n</div>\n\n<div style=\"background-color:#e6e6e6;\">\n    {% formfield player.q_device %}\n    {% formfield player.q_gender %}\n    {% formfield player.q_age %}\n    {% formfield player.q_prefecture %}\n</div>\n\n\n    {% next_button %}\n\n{%endblock%}\n```\n\n### easy explanation\n\n``` html\n{% block title %}\n    Questions:\n{%endblock%}\n```\n\n-   Set the \"Title\" in the web page.\n\n``` html\n{% block content %}\n    ...\n{%endblock%}\n```\n\n-   Write the actual question items in this.\n\n``` html\n  {% formfield player.q_device %}\n  {% formfield player.q_gender %}\n  {% formfield player.q_age %}\n  {% formfield player.q_prefecture %}\n```\n\n-   Write `{% formfield [defined in models] %}` for an item that requires some kind of input.\n    -   In this case, the input defined in the player class is required, so it is written as `player.`.\n\n``` html\n  {% next_button %}\n```\n\n-   This is the \"Next\" button.\n    -   Click this button to go to the next screen.\n\n## definition of pages:\n\n-   In `pages.py`, set the `page display order'',`input items'', \\*\\* \\`\\`function calculation order''\\*\\*, etc.\n\n    -   Actually, the \\`\\`order of function calculation'' is important.\n\n-   However, there is no function calculation this time, so don't worry about it.\n\n-   Behavior set in `pages.py`\n\n    -   Define the contents of `Page1.html`.\n\n        -   Display the items to be entered.\n\n### About Page1\n\n-   On `Page1`, there is an input of the answer to the question item.\n\n    -   Let's make an input screen.\n\n``` python\nclass Page1(Page):\n    form_model = 'player'\n    form_fields = [\n    'q_gender',\n    'q_age',\n    'q_prefecture',\n    'q_device'\n    ]\n```\n\n### Define the display order\n\n-   Defines the order in which the screen is displayed at the end.\n\n``` python\npage_sequence = [Page1]\n```\n\n## Defining session configs in setting:\n\n-   To implement experiments with oTree, you need to register your app in `SESSION_CONFIGS` in `settings.py`.\n\n``` python\nSESSION_CONFIGS = [\n    dict(\n        name='questionnaire',\n        display_name=\"Initial Questionnaire\",\n        num_demo_participants=1, # Here we need to define how many people will participate in the demo.\n        app_sequence=['questionnaire']\n    ),\n]\n```\n\n## start as server\n\n-   Start your own terminal as a server\n\n``` python\notree devserver\n```\n\n-   Now you can run the experiment on your own terminal.\n-   Access <http://localhost:8000/>.\n\n## Example of a survey\n\nTo run a simple survey in oTree, you need to deal with followings:\n\n1. `init.py` file which consist of **models** and **pages**\n\n2.  Based on how many web pages you want to show in your survey, you need to create same number of .html pages in the oTree.\n\n3. Every oTree project consists of a `settings.py` file that oragnize the flow of the project.\n\n- The detail code for the `init.py` is below:\n\n``` python\nfrom otree.api import *\n\ndoc = \"\"\"\nSurvey(SVO, CRT, Survey)\n\"\"\"\n\ndef make_field(label):\n    return models.IntegerField(\n         choices=[\n            [7, '7. Well applicable'],\n            [6, '6. Applicable'],\n            [5, '5. どちらかといえば当てはまる'],\n            [4, '4. どちらともいえない'],\n            [3, '3. どちらかといえば当てはまらない'],\n            [2, '2. 当てはまらない'],\n            [1, '1. Not applicable at all'],\n        ],\n        label=label,\n        widget=widgets.RadioSelect,\n   )\n\nclass C(BaseConstants): #class C(BaseConstans)は定数の定義している.\n    NAME_IN_URL = 'survey' #URLの名前\n    PLAYERS_PER_GROUP = None #一グループ何人にするのか、調査に関しては一人でするものなので、Noneとする\n    NUM_ROUNDS = 1 #一回で終わる場合は１、回数によって数を変える\n\n\nclass Subsession(BaseSubsession): #サブセッションの設定、今回の調査は一人で一回記入すると終了するのでサブセッションはいじらなくてよい\n    pass\n\n\nclass Group(BaseGroup): #gruopに関しても、今回はアンケートなので、いじる必要なし。。\n    pass\n\n\nclass Player(BasePlayer):\n    age = models.IntegerField(label='What is your age?', min=13, max=125) #IntergerField()は整数をテキストボックスに記入させる、label=質問文、min,maxで最小と最大値を指定\n    gender = models.StringField( #stringFieldは、文字列用\n        choices=[['Male', 'Male'], ['Female', 'Female']],#[value, display]のペアをリスト化できる。映し出されるのはdisplayのほう\n        label='What is your gender?',\n        widget=widgets.RadioSelect,#回答フォームがラジオボタン式(複数の選択項目の中から１つのみ選択)\n    )\n\n    q_country = models.StringField(initial=0,\n                                   label='あなたのおすまいの地域を教えてください．',\n                                   choices=['北海道',\n                                            '青森県', '岩手県', '宮城県', '秋田県', '山形県', '福島県',\n                                            '茨城県', '栃木県', '群馬県', '埼玉県', '千葉県', '東京都', '神奈川県',\n                                            '新潟県', '富山県', '石川県', '福井県', '山梨県', '長野県', '岐阜県', '静岡県', '愛知県',\n                                            '三重県','滋賀県', '京都府', '大阪府', '兵庫県', '奈良県', '和歌山県','鳥取県',\n                                            '島根県', '岡山県', '広島県', '山口県','徳島県', '香川県', '愛媛県', '高知県',\n                                            '福岡県', '佐賀県', '長崎県', '熊本県', '大分県', '宮崎県', '鹿児島県', '沖縄県'])\n\n    q_tanmatsu = models.StringField(initial=None,\n                                    choices=['パソコン',\n                                            'タブレット',\n                                            'スマートフォン',\n                                            'それ以外'\n                                            ],\n                                    label='この回答は、どの電子機器で回答していますか？',\n                                    widget=widgets.RadioSelect)\n\n    kannsou = models.LongStringField(initial=None,\n                                     label='本日の感想をお書きください',\n                                     )\n\n    crt_bat = models.IntegerField(\n        label='''\n        A bat and a ball cost 22 dollars in total.\n        The bat costs 20 dollars more than the ball.\n        How many dollars does the ball cost?'''\n    )\n    crt_widget = models.IntegerField(\n        label='''\n        If it takes 5 machines 5 minutes to make 5 widgets,\n        how many minutes would it take 100 machines to make 100 widgets?\n        '''\n    )\n    crt_lake = models.IntegerField(\n        label='''\n        In a lake, there is a patch of lily pads.\n        Every day, the patch doubles in size.\n        If it takes 48 days for the patch to cover the entire lake,\n        how many days would it take for the patch to cover half of the lake?\n        '''\n    )\n\n   #Legacy, Responsibility, Ethics\n\n    Legacy_positive = make_field(label='将来世代のために、正の遺産を残すことは重要である。')\n    Legacy_negative = make_field('将来世代に負の遺産を残さないことは重要である。')\n    Responsibility = make_field('私は将来世代への責任を感じる。')\n    Affinity = make_field('将来世代への共感、及び、親近感をもっている。')\n    Ethical_problem = make_field('将来世代のことを考える際に、倫理観は重要である。')\n    Ethical_moral = make_field('将来世代のことを考える際に、道徳観は重要である。')\n    Ethical_society = make_field('将来世代のことを考える際に、社会的責任を考慮することは重要である。')\n    Ethical_fairness = make_field('将来世代のことを考える際に、公平性は重要な観点である。')\n\n\n\n# FUNCTIONS\n# PAGES\n\nclass Demographics(Page):\n    form_model = 'player'\n    form_fields = ['age', 'gender', 'q_country', 'q_tanmatsu', 'kannsou']\n\nclass CognitiveReflectionTest(Page):\n    form_model = 'player'\n    form_fields = ['crt_bat', 'crt_widget', 'crt_lake']\n\nclass LRE(Page):\n    form_model = 'player'\n    form_fields = ['Legacy_positive', 'Legacy_negative', 'Responsibility', 'Affinity',\n                   'Ethical_problem', 'Ethical_moral', 'Ethical_society', 'Ethical_fairness']\n\nclass survey_instruction(Page):\n    pass\n\nclass Results(Page):\n    pass\npage_sequence = [survey_instruction, Demographics, CognitiveReflectionTest, LRE, Results]\n\n```\n\n- The `settings.py` file is as below:\n\n```python\nfrom os import environ\n\n\nSESSION_CONFIGS = [\n    dict(\n        name='survey',#作ったファイルの名前\n        app_sequence=['survey','payment_info'],\n        num_demo_participants=5,#ゲームのグループの人数\n    )\n]\n\n# if you set a property in SESSION_CONFIG_DEFAULTS, it will be inherited by all configs\n# in SESSION_CONFIGS, except those that explicitly override it.\n# the session config can be accessed from methods in your apps as self.session.config,\n# e.g. self.session.config['participation_fee']\n\nSESSION_CONFIG_DEFAULTS = dict(\n    real_world_currency_per_point=1.00, participation_fee=0.00, doc=\"\"\n)\n\nPARTICIPANT_FIELDS = []\nSESSION_FIELDS = []\n\n# ISO-639 code\n# for example: de, fr, ja, ko, zh-hans\nLANGUAGE_CODE = 'en'\n\n# e.g. EUR, GBP, CNY, JPY\nREAL_WORLD_CURRENCY_CODE = 'JPY'\nUSE_POINTS = True\n\nADMIN_USERNAME = 'admin'\n# for security, best to set admin password in an environment variable\nADMIN_PASSWORD = environ.get('OTREE_ADMIN_PASSWORD')\n\nDEMO_PAGE_INTRO_HTML = \"\"\"\nHere are some oTree games.\n\"\"\"\n\n\nSECRET_KEY = '7050001148777'\n\n```\n\nIn this survey, we have used five different pages. So we need to create five .html files:\n\n- CognitiveReflectionTest.html\n\n- Demograhics.html\n\n- LRE.html\n\n- Results.html\n\n- survey_instructions.html\n\nYou can find the contents of each html files below:\n\n1. CognitiveReflectionTest.html\n\n```html\n{{ block title }}Survey{{ endblock }}\n{{ block content }}\n<p> あなたの年齢は{{ player.age }}で、性別は{{ player.gender }}です。</p>\n    {{ formfields }}\n\n    {{ next_button }}\n\n{{ endblock }}\n```\n\n2. Demograhics.html\n\n```html\n{{ block title }}Survey{{ endblock }}\n{{ block content }}\n\n    <p>\n\n    </p>\n\n    {{ formfields }}\n\n    {{ next_button }}\n\n{{ endblock }}\n```\n\n3. LRE.html\n\n```html\n{{ block title }}\n\n{{ endblock }}\n{{ block content }}\n    <p>\n        <b> 各質問に対して、あなたはどれくらい当てはまりますか。選択肢１～7の中からお選びください。</b>\n    </p>\n    {{ formfields }}\n\n{{ next_button }}\n{{ endblock }}\n```\n\n4. Results.html\n\n```html\n{{ block title }}\nお疲れ様でした。\n{{ endblock }}\n\n{{ block content }}\n<p>実験参加有難う御座いました。<br>\n    以上で本実験は終了です。\n    Zoomに戻り、指示があるまでお待ち下さい。\n</p>\n\n\n\n{{ endblock }}\n```\n\n5. survey_instruction.html\n\n```html\n{{ block title }}\n    質問表\n{{ endblock }}\n\n{{ block content }}\n<p>これ以降の質問に答えて下さい。</p>\n<p><b>個人情報の取扱いについて</b></p>\n<p>\n今回の調査で知り得た内容については、調査の目的以外には使用いたしません。<br>\n回収した調査票・データについても適切に処分、管理し、本プロジェクトの目的以外に利用することはありません。<br>\nあなたの個人情報は、完全に匿名性が担保されており教育、研究の目的にのみ使用されます。\n</p>\n\n<img width=\"200\" height=\"200\" src=\"{{ static 'sihuku11.jpg' }}\"/>\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kj8FIDXvjsY\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n    {{ next_button }}\n{{ endblock }}\n```\n"},"formats":{"html":{"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"chapter_10.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.1.168","bibliography":["references.bib"],"editor":"visual","theme":"cosmo"},"extensions":{"book":{"multiFile":true}}},"pdf":{"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"markdown"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"chapter_10.pdf"},"language":{},"metadata":{"block-headings":true,"bibliography":["references.bib"],"editor":"visual","documentclass":"scrreprt"},"extensions":{"book":{}}}}}