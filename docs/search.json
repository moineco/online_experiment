[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Social Experiments with oTree and Python",
    "section": "",
    "text": "oTree is an open-source and online software for implementing interactive experiments in the laboratory, online, the field or combinations thereof. The basic experimental setup in oTree consists of (i) an experiment written within oTree, (ii) a server computer, which can be a cloud server or a local laptop and (iii) subjects’ devices with a web browser. oTree creates an experimental session on the server, as well as links for all the participants and the experimenter.\noTree is a framework based on Python that lets you build multiplayer strategy games, like the prisoner’s dilemma, public goods game and many other behavioral experiments in economics, psychology, and related field. This tutorial will develop experiments by using oTree software. For Python code generation, we will use Pycharm IDE."
  },
  {
    "objectID": "chapter_1.html",
    "href": "chapter_1.html",
    "title": "1  Installation and environments",
    "section": "",
    "text": "Before installing oTree, it is required to have Python installed in your environment to run oTree.\nOpen the python website and install Python3 for your OS from this Python website.\nChoose the most recent version of Python"
  },
  {
    "objectID": "chapter_1.html#install-pip",
    "href": "chapter_1.html#install-pip",
    "title": "1  Installation and environments",
    "section": "1.2 Install pip",
    "text": "1.2 Install pip\nIf your Python environment does not have pip installed, you can install it by following this pip instructions."
  },
  {
    "objectID": "chapter_1.html#install-pycharm",
    "href": "chapter_1.html#install-pycharm",
    "title": "1  Installation and environments",
    "section": "1.3 Install Pycharm",
    "text": "1.3 Install Pycharm\n\nPyCharm is a famous Python IDE (Integrated Development Environment). We recommend you to use PyCharm if you want to further customize your oTree app by programming. Please go to this Pycharm website to download the installation package.\nThere are different version of Pycharm. I recommend to install the Pycharm professional because it has better syntax highlighting. To have the professional version for academic use, you need to have an academic email address.\nAlternatively you can install the community version of Pycharm which is free of charge.\n\n\n1.3.1 Run Pycharm\n\nCreate a new Pycharm project. Choose pure python. Give a name of the project. Pycharm will create the project for you."
  },
  {
    "objectID": "chapter_1.html#install-github",
    "href": "chapter_1.html#install-github",
    "title": "1  Installation and environments",
    "section": "1.4 Install GitHub",
    "text": "1.4 Install GitHub\nMake sure you have some kind of version control, I use GitHub. If you crash your code, you can always go back to a previous version of the code."
  },
  {
    "objectID": "chapter_1.html#install-otree",
    "href": "chapter_1.html#install-otree",
    "title": "1  Installation and environments",
    "section": "1.5 Install oTree",
    "text": "1.5 Install oTree\n\noTree can be installed through pip. Open the terminal (Mac/Linux) or command prompt (Windows PowerShell) and type:\n\npip3 install otree\n\nYou can install oTree in your computer by using the terminal in Pycharm as well.\n\npip3 install otree\n\n1.5.1 Upgrading/reinstalling oTree\npip3 install -U otree\n\nRecommend upgrading every couple of weeks.\n\n\n\n1.5.2 Regarding the installation of oTree in Linux\n\nYou might need to do the proxy server settings\nIn the Pycharm, you can open the terminal and install oTree as below:\n\nset https_proxy address:password\npip install otree"
  },
  {
    "objectID": "chapter_1.html#otree-setup",
    "href": "chapter_1.html#otree-setup",
    "title": "1  Installation and environments",
    "section": "1.6 oTree setup",
    "text": "1.6 oTree setup\n\nFrom your command prompt, create your IGG project\n\notree startproject IGG\n\nMove into the folder you just created\n\ncd IGG\n\nRun the server\nStart your own terminal as a server.\n\notree devserver\n\nOpen your browser to http://localhost:8000/. You should see the oTree demo site.\nTo stop the server, press Control+C at your command line.\nTo create a new app, run\n\notree startapp app_name\n\nSession configs are defined in settings.py"
  },
  {
    "objectID": "chapter_2.html",
    "href": "chapter_2.html",
    "title": "2  Structure of an oTree project",
    "section": "",
    "text": "One app can be an experiment or a part of experiment. A project is collection of all different types of App.\nIf your experiment consist of a prisoner’s dilemma game and a survey, then you need to create two apps, one app for prisoners dilemma and another app is for survey.\nLater you can combine these two apps and run one session.\nApp is like one experiment and project is like a container of different experiments.\nHow you structure the projects is up to you. You can choose the sequence.\nNow if you see the structure of the examples, you can see that there are various different types of folder.\nThe following two folders are known as global settings as they are same level of the project\n\n\n_Static\n\n\nImages, sounds, videos\n\n\n_Template\n\n\nDesign how web page look like. If you want a specific style of your webpage, you can include a template\n\n\nsettings.py\n\n\nIt is also global option. From this setting file, you can change various global options, for instance Your currency, language, interface\nIn this setting.py file you will find the session_configs where you can setup the sequence of apps for your project."
  },
  {
    "objectID": "chapter_2.html#how-to-create-a-new-app.",
    "href": "chapter_2.html#how-to-create-a-new-app.",
    "title": "2  Structure of an oTree project",
    "section": "2.2 How to create a new app.",
    "text": "2.2 How to create a new app.\n\nNavigate your working folder by using cd\nFor instance you are using the project IGG. Then use\n\ncd IGG \nTo navigate in this folder\n\nNow you can create a new app from the terminal.\n\nIf you want to create a app, name “SVO”\notree startapp SVO\n\nYou will notice that a new app named “SVO” is listed on your Pycharm\nIf you don’t see a models.py in each folder, that means you are using the new no-self format.\nIf you open the app, you can see that it contains three different types of files:\n\n_init.py\nMyPage.html\nResults.html\n\n\nIf you open the init.py you can find several different class.\nYou can edit it based on your game. Two most important classes are:\n\nclass (Constants)\nclass (Player)\n\nEverything we want to analyze and store in data should be stored in Player."
  },
  {
    "objectID": "chapter_3.html",
    "href": "chapter_3.html",
    "title": "3  The building blocks of oTree",
    "section": "",
    "text": "Templates\n\nEvery page in an experiment is a template with a certain lay-out and text. Templates are .html files in which you can use HTML, CSS, Javascript, and Django.\n\nModels.py\n\nIn Models.py you define the variables that will be stored in your data-output. For instance, if you want to ask the age of a participant you create a variable:\nage = models.IntegerField(label=\"What is your age?\")\nHere, a model is a database table and a field is one column within that table. In this case, an IntegerField is used, indicating that only integer numbers are valid. The label determines the text that is shown to participants next to the variable. There are six StringField that you can use:\n\nIntegerField for integer numbers\nFloatField for numbers that may include decimals\nStringField for strings of text\nLongStringField for long strings of text\nBooleanField for True/False values\nCurrencyField for currency amounts\n\n\nPages.py\n\nIn Pages.py you define every page that is shown to participants and specify which variables are allocated to that page. For instance:\nclass Instructions(Page):\n    form_model = 'player'\n    form_fields = ['Comprehension1', 'Comprehension2']\nHere, Instructions is the name of the page, and form_model refers to the level at which the variables should be stored. form_fields includes a list of variables that can be elicited on the page. In this case, we include two comprehension checks that are further defined in Models.py. Next to defining and specifying variables for every page, Pages.py is also used to determine the page sequence.\npage_sequence = [Instructions, Main_Page, Results]\nMoreover, there are a battery of functions that can be used to specify conditions for each page. For example, the is_displayed() function determines conditions to which participants the page is displayed.\n\nSettings.py\n\nThe last building block of oTree is Settings.py. Here you define some overarching settings of your oTree project, such as the language used, the currency used, your admin username and password, how experimental currency translates to real-world currency, and the apps that are available. For the latter, if you have an app called attribute_substitution. You can make it available in your oTree server by typing:\nSESSION_CONFIGS = [\n    dict(\n       name='attribute_substitution',\n       display_name=\"Attribute Substitution Game\",\n       num_demo_participants=3,\n       app_sequence=['attribute_substitution']\n    ),\n]\nHere, the name and display name are whatever you prefer (for name you cannot use spaces). The number of demo participants is the number of slots available to play a demo version of the experiment. The most important thing here is the app_sequence. In the app_sequence you define the sequence of apps that is displayed to participants. Suppose that you want to combine the attribute_substitution app with a public goods game or a survey, you can add, public_goods or survey, respectively."
  },
  {
    "objectID": "chapter_4.html",
    "href": "chapter_4.html",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "",
    "text": "oTree Studio is a point-and-click interface for building oTree apps. It is free to use for small/medium sized projects."
  },
  {
    "objectID": "chapter_4.html#create-project-by-otree-hub",
    "href": "chapter_4.html#create-project-by-otree-hub",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "4.1 Create project by oTree Hub",
    "text": "4.1 Create project by oTree Hub\n\nIf you are a new, it is recommended to use oTree Studio to create and edit the project instead of hard coding. Please click this link to register an oTree Hub account then login.\nClick the “+ Project” button to create a new project.\nThen you’re able to visit the project configuration page where you can config the metadata for your project.\nGo to the “download” and click the “Download .otreezip” button to download the project."
  },
  {
    "objectID": "chapter_4.html#pycharm-to-customize-the-project",
    "href": "chapter_4.html#pycharm-to-customize-the-project",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "4.2 PyCharm to customize the project",
    "text": "4.2 PyCharm to customize the project\n\nAfter creating and customizing your project on oTree Studio, you can also further customize your project using PyCharm or other IDE. First, you need to unpack your downloaded .otreezip file. To do this, run:\n\notree unzip xx.otreezip\n\nThe command will produce a folder with an identical name. Use PyCharm to open that folder.\nThen, you can add python code to further customize the project. After adding your code, run the following command to re-pack the project into the .otreezip file:\n\notree zip"
  },
  {
    "objectID": "chapter_4.html#host-the-app-locally",
    "href": "chapter_4.html#host-the-app-locally",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "4.3 Host the App locally",
    "text": "4.3 Host the App locally\n\nOpen a terminal/Command Prompt on your computer and change the working directory to where you store your previously downloaded project file. Execute the following command to start an oTree test server:\n\notree zipserver\n\nThen, you can open http://localhost:8000/ in your browser to test your project out."
  },
  {
    "objectID": "chapter_5.html",
    "href": "chapter_5.html",
    "title": "5  Deploy on Heroku from oTree",
    "section": "",
    "text": "In order to make the oTree instance accessible globally, a server is needed. We use Heroku which is a cloud hosting server that provides a platform for apps where you can easily host your oTree application and open access to the public.\nIf you run an experiment with a substantial number of participants, you must upgrade to a paid server. As you can immediately scale the server capacity it is not expensive to use. For instance, if you run your experiment in the timeframe of three days, you only pay 3/30th of the monthly fees as you scale it up before you use it and scale it down after you use it. After you have created an account on Heroku, download and install the Heroku CLI. After installing the Heroku Command Line Interface (CLI), there are three ways to deploy experiments to Heroku:"
  },
  {
    "objectID": "chapter_5.html#connecting-otree-to-heroku",
    "href": "chapter_5.html#connecting-otree-to-heroku",
    "title": "5  Deploy on Heroku from oTree",
    "section": "5.1 Connecting oTree to Heroku",
    "text": "5.1 Connecting oTree to Heroku\n\n5.1.1 oTree Hub\noTree Hub is the easiest way and requires least coding. However, convenience comes at a cost as you can have limited free project space and everything you deploy using oTree Hub becomes publicly available immediately, unless you pay.\n\n\n5.1.2 GitHub\nGitHub also does not require programming and you can even auto-deploy your experiment every time you commit changes to GitHub. If you have a GitHub account, you can integrate this with Heroku. In Heroku, create an app and click on “Deploy”. Here, you can authorize Heroku to access your GitHub repositories. After authorizing Heroku, you can search for your GitHub repository and connect it to Heroku. You can either manually deploy your GitHub repository to Heroku or automatically deploy all pushes you make to GitHub. If you add new variables in your experiment, you should reset the database in Heroku by using the following code in the Command Prompt.\nheroku login\nheroku run \"otree resetdb\" --app your_appname\n\n\n5.1.3 Terminal\nYou can use the command line (or Terminal for iOS users) to deploy your experiment to Heroku. In this case, you do not need any third-party software except Heroku. To use the command prompt you need to follow the following steps:\n\nLocate the project root folder (particular oTree instance).\n\ncd '/Users/Name/Folder/'\n\nIf you have created a Heroku account, use the following command. If you do not have a Heroku account yet, you can create one here.\n\nheroku login\n\nIf the above command does not work, you probably have not installed Heroku CLI properly.\nThen, you can create a new Heroku-app, if you don’t have one yet.\n\nheroku create your_appname\n\nSince you are already in the project root folder you can create the .git here.\n\ngit init\nheroku git:remote -a your_appname\n\nYou can push your code locally to Heroku. Finally push the local repository to the Heroku server.\n\ngit push heroku master\n\nIn order to view the Heroku app, enter the following command or enter the URL in your browser.\n\nheroku open\n\nIf you add new variables in the models.py, you should reset the database in Heroku.\n\nheroku login\nheroku run \"otree reset db\" --APP your_appname\n\nOr do it manually in the Heroku app, simlarly to the way described earlier."
  },
  {
    "objectID": "chapter_6.html",
    "href": "chapter_6.html",
    "title": "6  Models.py",
    "section": "",
    "text": "Models.py for calculations, logic of the game. Responsible for processing related to data access. Perform interactions between web apps and databases. In oTree, models.py mainly plays that role. As an image, it deals with “definition of necessary data” and “calculation (logic)”\ndetermine the variables in the experiment"
  },
  {
    "objectID": "chapter_6.html#constants",
    "href": "chapter_6.html#constants",
    "title": "6  Models.py",
    "section": "6.1 Constants",
    "text": "6.1 Constants\nclass Constants(BaseConstants):\n   name_in_url = 'public_goods_simple'\n   players_per_group = 3\n   num_rounds = 1\n   \n   endowmwnt = c(100)\n   efficiency_factor = 1.8"
  },
  {
    "objectID": "chapter_7.html",
    "href": "chapter_7.html",
    "title": "7  Pages.py",
    "section": "",
    "text": "Responsible for screen display. It defines the order of screen display and the data (input items) to be displayed. In oTree, pages.py (views.py) mainly plays that role. As an image, it shows “what data is displayed (What)”\nDecide what to do when each page is displayed.\n\nwhere do you run the function?\nOn which page do you enter certain variables?\nIn what order do page transitions occur?"
  },
  {
    "objectID": "chapter_8.html",
    "href": "chapter_8.html",
    "title": "8  Template.html",
    "section": "",
    "text": "Responsible for screen display. The part for creating the web page displayed on the screen. In oTree, each html file in the template folder mainly plays that role. As an image, it shows “How to display data”.\ncreate a screen in html format\n\nWhere to output characters.\nWhere to create the input field.\nWhere to output the calculation results."
  },
  {
    "objectID": "chapter_9.html",
    "href": "chapter_9.html",
    "title": "9  Settings.py",
    "section": "",
    "text": "You can also register multiple apps at once here."
  },
  {
    "objectID": "chapter_10.html",
    "href": "chapter_10.html",
    "title": "10  Questionnaire survey with oTree",
    "section": "",
    "text": "Questionnaire (single player)\n\nQuestion item\n\nGender (radio button)\nAge (optional)\nPrefecture of residence (optional)\nDevice used for answering (select)"
  },
  {
    "objectID": "chapter_10.html#create-an-app",
    "href": "chapter_10.html#create-an-app",
    "title": "10  Questionnaire survey with oTree",
    "section": "10.2 Create an app",
    "text": "10.2 Create an app\nCreate a base application\notree startapp questionnaire\n\n10.2.1 Defining the Constants class: basic design\n\nOpen models.py in questionnaire folder\nSet the number of people, the number of repetitions, the initial holding amount, and the coefficient in the Constants class.\n\nclass Constants(BaseConstants):\n    name_in_url = 'questionnaire'\n    players_per_group = None \n    num_rounds = 1 \nNotes:\n\nFor players_per_group, enter “None” for 1 player.\nFor num_rounds, enter “1” to ask only once.\nnames_in_url, players_per_group, num_rounds are defined on oTree, so it is not desirable to use them as arbitrary variable names.\n\n\n\n10.2.2 Subsession class definition\n\nSince there is no interaction between players this time, it is not defined.\n\nclass Subsession(BaseSubsession):\n    pass\n\n\n10.2.3 Group class definition\n\nSince there is no interaction between players this time, it is not defined.\n\nclass Group(BaseGroup):\n    pass\n\n\n10.2.4 Player class definition\n\nDefine variables for each player in the Player class\n\nclass Player(BasePlayer):\n    q_gender = models.CharField(initial=None,\n                                choices=['male', 'female', 'no answer'],\n                                verbose_name='What is your gender? ',\n                                widget=widgets.RadioSelect())\n    \n    q_age = models.PositiveIntegerField(verbose_name='What is your age?',\n                                        choices=range(0, 125),\n                                        initial=None)\n    \n    q_prefecture = models.CharField(initial=None,\n                                choices=['Hokkaido', 'Aomori', 'Iwate', 'Miyagi', 'Akita', 'Yamagata', 'Fukushima', 'Ibaraki', 'Tochigi', 'Gunma', 'Saitama', 'Chiba', 'Tokyo', 'Kanagawa', 'Niigata', 'Toyama', 'Ishikawa', 'Fukui', 'Yamanashi', 'Nagano', 'Gifu', 'Shizuoka', 'Aichi', 'Mie', 'Shiga', 'Kyoto', 'Osaka', 'Hyogo', 'Nara', 'Wakayama', 'Tottori', 'Shimane', 'Okayama', 'Hiroshima', 'Yamaguchi', 'Tokushima', 'Kagawa', 'Ehime', 'Kochi', 'Fukuoka', 'Saga', 'Nagasaki', 'Kumamoto', 'Oita', 'Miyazaki', 'Kagoshima', 'Okinawa'],\n                                verbose_name='What area do you live in? ',\n                                widget=forms.Select())\n\n    q_device = models.CharField(initial=None,\n                                choices=['computer',\n                                        'Tablet',\n                                        'smartphone',\n                                        'other than that'\n                                        ],\n                                verbose_name='By which electronic device are you answering? ',\n                                widget=forms.Select())"
  },
  {
    "objectID": "chapter_10.html#defining-templates",
    "href": "chapter_10.html#defining-templates",
    "title": "10  Questionnaire survey with oTree",
    "section": "10.3 Defining templates:",
    "text": "10.3 Defining templates:\n\nIn templates, we will decide on the page to display specific items.\nCreate an html file called Page1.html in questionnaire/templates/questionnaire\n\nYou just need to rewrite the existing MyPage.html\n\n\n\n10.3.1 pages\n{% extends \"global/Page.html\" %}\n{% load otree static %}\n\n{% block title %}\n    Questions:\n{%endblock%}\n\n{% block content %}\n\n<div>\n    <p>\n        Please select the most appropriate (closest) option for the following questions. <br>\n    </p>\n</div>\n\n<div style=\"background-color:#e6e6e6;\">\n    {% formfield player.q_device %}\n    {% formfield player.q_gender %}\n    {% formfield player.q_age %}\n    {% formfield player.q_prefecture %}\n</div>\n\n\n    {% next_button %}\n\n{%endblock%}\n\n\n10.3.2 easy explanation\n{% block title %}\n    Questions:\n{%endblock%}\n\nSet the “Title” in the web page.\n\n{% block content %}\n    ...\n{%endblock%}\n\nWrite the actual question items in this.\n\n  {% formfield player.q_device %}\n  {% formfield player.q_gender %}\n  {% formfield player.q_age %}\n  {% formfield player.q_prefecture %}\n\nWrite {% formfield [defined in models] %} for an item that requires some kind of input.\n\nIn this case, the input defined in the player class is required, so it is written as player..\n\n\n  {% next_button %}\n\nThis is the “Next” button.\n\nClick this button to go to the next screen."
  },
  {
    "objectID": "chapter_10.html#definition-of-pages",
    "href": "chapter_10.html#definition-of-pages",
    "title": "10  Questionnaire survey with oTree",
    "section": "10.4 definition of pages:",
    "text": "10.4 definition of pages:\n\nIn pages.py, set the page display order'',input items’‘, ** ``function calculation order’’**, etc.\n\nActually, the ``order of function calculation’’ is important.\n\nHowever, there is no function calculation this time, so don’t worry about it.\nBehavior set in pages.py\n\nDefine the contents of Page1.html.\n\nDisplay the items to be entered.\n\n\n\n\n10.4.1 About Page1\n\nOn Page1, there is an input of the answer to the question item.\n\nLet’s make an input screen.\n\n\nclass Page1(Page):\n    form_model = 'player'\n    form_fields = [\n    'q_gender',\n    'q_age',\n    'q_prefecture',\n    'q_device'\n    ]\n\n\n10.4.2 Define the display order\n\nDefines the order in which the screen is displayed at the end.\n\npage_sequence = [Page1]"
  },
  {
    "objectID": "chapter_10.html#defining-session-configs-in-setting",
    "href": "chapter_10.html#defining-session-configs-in-setting",
    "title": "10  Questionnaire survey with oTree",
    "section": "10.5 Defining session configs in setting:",
    "text": "10.5 Defining session configs in setting:\n\nTo implement experiments with oTree, you need to register your app in SESSION_CONFIGS in settings.py.\n\nSESSION_CONFIGS = [\n    dict(\n        name='questionnaire',\n        display_name=\"Initial Questionnaire\",\n        num_demo_participants=1, # Here we need to define how many people will participate in the demo.\n        app_sequence=['questionnaire']\n    ),\n]"
  },
  {
    "objectID": "chapter_10.html#start-as-server",
    "href": "chapter_10.html#start-as-server",
    "title": "10  Questionnaire survey with oTree",
    "section": "10.6 start as server",
    "text": "10.6 start as server\n\nStart your own terminal as a server\n\notree devserver\n\nNow you can run the experiment on your own terminal.\nAccess http://localhost:8000/."
  },
  {
    "objectID": "chapter_12.html",
    "href": "chapter_12.html",
    "title": "12  Conclusion",
    "section": "",
    "text": "It’s easier to understand if you think about the program while thinking about this\n\nhow many players?\nWhat are the variables that affect everyone?\nWhat variables are determined by individual players?\nHow many pages to create?\nWhat kind of page transition is performed?"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Chen, D. L., Schonger, M., & Wickens, C. (2016). oTree—An open-source platform for laboratory, online, and field experiments. Journal of Behavioral and Experimental Finance, 9, 88-97.\nFischbacher, U. (2007). z-Tree: Zurich toolbox for ready-made economic experiments. Experimental Economics, 10, 171-178."
  }
]