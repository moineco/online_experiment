[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Behavorial Experiments with oTree and Python",
    "section": "",
    "text": "oTree is an open-source and online software for implementing interactive experiments in the laboratory, online, the field or combinations thereof. The basic experimental setup in oTree consists of (i) an experiment written within oTree, (ii) a server computer, which can be a cloud server or a local laptop and (iii) subjects’ devices with a web browser. oTree creates an experimental session on the server, as well as links for all the participants and the experimenter.\noTree is a framework based on Python that lets you build:\n\nMultiplayer strategy games, like the prisoner’s dilemma, public goods game, and auctions\nControlled behavioral experiments in economics, psychology, and related fields\nSurveys and quizzes\n\nThis tutorial will use Python to develop the experiment by using oTree software. For Python code generation, we will use Pycharm Professional software."
  },
  {
    "objectID": "chapter_1.html",
    "href": "chapter_1.html",
    "title": "1  Installation and environments",
    "section": "",
    "text": "Before installing oTree, it is required to have Python installed in your environment to run oTree.\nOpen the python website and install Python3 for your OS from this Python website.\nChoose the most recent version of Python"
  },
  {
    "objectID": "chapter_1.html#install-pip",
    "href": "chapter_1.html#install-pip",
    "title": "1  Installation and environments",
    "section": "1.2 Install pip",
    "text": "1.2 Install pip\nIf your Python environment does not have pip installed, you can install it by following this pip instructions."
  },
  {
    "objectID": "chapter_1.html#install-pycharm",
    "href": "chapter_1.html#install-pycharm",
    "title": "1  Installation and environments",
    "section": "1.3 Install Pycharm",
    "text": "1.3 Install Pycharm\n\nPyCharm is a famous Python IDE (Integrated Development Environment). We recommend you to use PyCharm if you want to further customize your oTree app by programming. Please go to this Pycharm website to download the installation package.\nThere are different version of Pycharm. I recommend to install the Pycharm professional because it has better syntax highlighting. To have the professional version for academic use, you need to have an academic email address.\nAlternatively you can install the community version of Pycharm which is free of charge.\n\n\n1.3.1 Run Pycharm\n\nCreate a new Pycharm project. Choose pure python. Give a name of the project. Pycharm will create the project for you."
  },
  {
    "objectID": "chapter_1.html#install-github",
    "href": "chapter_1.html#install-github",
    "title": "1  Installation and environments",
    "section": "1.4 Install GitHub",
    "text": "1.4 Install GitHub\nMake sure you have some kind of version control, I use GitHub. If you crash your code, you can always go back to a previous version of the code."
  },
  {
    "objectID": "chapter_1.html#install-otree",
    "href": "chapter_1.html#install-otree",
    "title": "1  Installation and environments",
    "section": "1.5 Install oTree",
    "text": "1.5 Install oTree\n\noTree can be installed through pip. Open the terminal (Mac/Linux) or command prompt (Windows PowerShell) and type:\n\npip3 install otree\n\nYou can install oTree in your computer by using the terminal in Pycharm as well.\n\npip3 install otree\n\n1.5.1 Upgrading/reinstalling oTree\npip3 install -U otree\n\nRecommend upgrading every couple of weeks.\n\n\n\n1.5.2 Regarding the installation of oTree in Linux\n\nYou might need to do the proxy server settings\nIn the Pycharm, you can open the terminal and install oTree as below:\n\nset https_proxy address:password\npip install otree"
  },
  {
    "objectID": "chapter_1.html#otree-setup",
    "href": "chapter_1.html#otree-setup",
    "title": "1  Installation and environments",
    "section": "1.6 oTree setup",
    "text": "1.6 oTree setup\n\nFrom your command prompt, create your IGG project\n\notree startproject IGG\n\nMove into the folder you just created\n\ncd IGG\n\nRun the server\n\notree devserver\n\nOpen your browser to http://localhost:8000/. You should see the oTree demo site.\nTo stop the server, press Control+C at your command line.\nTo create a new app, run\n\notree startapp app_name\n\nSession configs are defined in settings.py"
  },
  {
    "objectID": "chapter_2.html",
    "href": "chapter_2.html",
    "title": "2  Structure of an oTree project",
    "section": "",
    "text": "One app can be an experiment or a part of experiment. A project is collection of all different types of App.\nIf your experiment consist of a prisoner’s dilemma game and a survey, then you need to create two apps, one app for prisoners dilemma and another app is for survey.\nLater you can combine these two apps and run one session.\nApp is like one experiment and project is like a container of different experiments.\nHow you structure the projects is up to you. You can choose the sequence.\nNow if you see the structure of the examples, you can see that there are various different types of folder.\nThe following two folders are known as global settings as they are same level of the project\n\n\n_Static\n\n\nImages, sounds, videos\n\n\n_Template\n\n\nDesign how web page look like. If you want a specific style of your webpage, you can include a template\n\n\nsettings.py\n\n\nIt is also global option. From this setting file, you can change various global options, for instance Your currency, language, interface\nIn this setting.py file you will find the session_configs where you can setup the sequence of apps for your project."
  },
  {
    "objectID": "chapter_2.html#how-to-create-a-new-app.",
    "href": "chapter_2.html#how-to-create-a-new-app.",
    "title": "2  Structure of an oTree project",
    "section": "2.2 How to create a new app.",
    "text": "2.2 How to create a new app.\n\nNavigate your working folder by using cd\nFor instance you are using the project IGG. Then use\n\ncd IGG \nTo navigate in this folder\n\nNow you can create a new app from the terminal.\n\nIf you want to create a app, name “SVO”\notree startapp SVO\n\nYou will notice that a new app named “SVO” is listed on your Pycharm\nIf you don’t see a models.py in each folder, that means you are using the new no-self format.\nIf you open the app, you can see that it contains three different types of files:\n\ninit.py\nMyPage.html\nResults.html\n\n\nIf you open the init.py you can find several different class.\nYou can edit it based on your game. Two most important classes are:\n\nclass (Constants)\nclass (Player)\n\nEverything we want to analyze and store in data should be stored in Player."
  },
  {
    "objectID": "chapter_3.html",
    "href": "chapter_3.html",
    "title": "3  The building blocks of oTree",
    "section": "",
    "text": "Templates\n\nThe first building block are templates: every page in an experiment is a template with a certain lay-out and text. Templates are .html files in which you can use HTML, CSS, Javascript, and Django.\n\nModels.py\n\nIn Models.py you define the variables that will be stored in your data-output. For instance, if you want to ask the age of a participant you create a variable:\nage = models.IntegerField(label=\"What is your age?\")\nHere, a model is a database table and a field is one column within that table. In this case, an IntegerField is used, indicating that only integer numbers are valid. The label determines the text that is shown to participants next to the variable. There are six StringField that you can use:\n\nIntegerField for integer numbers\nFloatField for numbers that may include decimals\nStringField for strings of text\nLongStringField for long strings of text\nBooleanField for True/False values\nCurrencyField for currency amounts\n\n\nPages.py\n\nIn Pages.py you define every page that is shown to participants and specify which variables are allocated to that page. For instance:\nclass Instructions(Page):\n    form_model = 'player'\n    form_fields = ['Comprehension1', 'Comprehension2']\nHere, Instructions is the name of the page, and form_model refers to the level at which the variables should be stored. form_fields includes a list of variables that can be elicited on the page. In this case, we include two comprehension checks that are further defined in Models.py. Next to defining and specifying variables for every page, Pages.py is also used to determine the page sequence.\npage_sequence = [Instructions, Main_Page, Results]\nMoreover, there are a battery of functions that can be used to specify conditions for each page. For example, the is_displayed() function determines conditions to which participants the page is displayed.\n\nSettings.py\n\nThe last building block of oTree is Settings.py. Here you define some overarching settings of your oTree project, such as the language used, the currency used, your admin username and password, how experimental currency translates to real-world currency, and the apps that are available. For the latter, if you have an app called attribute_substitution. You can make it available in your oTree server by typing:\nSESSION_CONFIGS = [\n    dict(\n       name='attribute_substitution',\n       display_name=\"Attribute Substitution Game\",\n       num_demo_participants=3,\n       app_sequence=['attribute_substitution']\n    ),\n]\nHere, the name and display name are whatever you prefer (for name you cannot use spaces). The number of demo participants is the number of slots available to play a demo version of the experiment. The most important thing here is the app_sequence. In the app_sequence you define the sequence of apps that is displayed to participants. Suppose that you want to combine the attribute_substitution app with a public goods game or a survey, you can add, public_goods or survey, respectively."
  },
  {
    "objectID": "chapter_4.html",
    "href": "chapter_4.html",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "",
    "text": "oTree Studio is a point-and-click interface for building oTree apps. It is free to use for small/medium sized projects."
  },
  {
    "objectID": "chapter_4.html#create-project-by-otree-hub",
    "href": "chapter_4.html#create-project-by-otree-hub",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "4.1 Create project by oTree Hub",
    "text": "4.1 Create project by oTree Hub\n\nIf you are a new, it is recommended to use oTree Studio to create and edit the project instead of hard coding. Please click this link to register an oTree Hub account then login.\nClick the “+ Project” button to create a new project.\nThen you’re able to visit the project configuration page where you can config the metadata for your project.\nGo to the “download” and click the “Download .otreezip” button to download the project."
  },
  {
    "objectID": "chapter_4.html#pycharm-to-customize-the-project",
    "href": "chapter_4.html#pycharm-to-customize-the-project",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "4.2 PyCharm to customize the project",
    "text": "4.2 PyCharm to customize the project\n\nAfter creating and customizing your project on oTree Studio, you can also further customize your project using PyCharm or other IDE. First, you need to unpack your downloaded .otreezip file. To do this, run:\n\notree unzip xx.otreezip\n\nThe command will produce a folder with an identical name. Use PyCharm to open that folder.\nThen, you can add python code to further customize the project. After adding your code, run the following command to re-pack the project into the .otreezip file:\n\notree zip"
  },
  {
    "objectID": "chapter_4.html#host-the-app-locally",
    "href": "chapter_4.html#host-the-app-locally",
    "title": "4  Pycharm to customize oTree studio project",
    "section": "4.3 Host the App locally",
    "text": "4.3 Host the App locally\n\nOpen a terminal/Command Prompt on your computer and change the working directory to where you store your previously downloaded project file. Execute the following command to start an oTree test server:\n\notree zipserver\n\nThen, you can open http://localhost:8000/ in your browser to test your project out."
  },
  {
    "objectID": "chapter_5.html",
    "href": "chapter_5.html",
    "title": "5  On heroku from oTree",
    "section": "",
    "text": "Heroku is a website hosting service where you can easily host your oTree application and open access to the public."
  },
  {
    "objectID": "chapter_6.html",
    "href": "chapter_6.html",
    "title": "6  Basic survey by using oTree",
    "section": "",
    "text": "- Introduction.html\n- Survey1.html\n- Survey2.html\n- Survey3.html\n- Demographics.html\nThe questionnaire always starts with Introduction.html, and always ends with a Demographics.html.Between these two pages, the application randomizes other pages included under templates as “Survey.html”. The order of items and questions on every page are also randomized. The questionnaire also includes a progress bar."
  },
  {
    "objectID": "chapter_5.html#connecting-otree-to-heroku",
    "href": "chapter_5.html#connecting-otree-to-heroku",
    "title": "5  On heroku from oTree",
    "section": "5.1 Connecting oTree to Heroku",
    "text": "5.1 Connecting oTree to Heroku\n\noTree Hub\nGitHub\nCommand Prompt"
  }
]